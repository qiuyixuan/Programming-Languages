See Homework 4 for instructions.

Description of Files:
---------------------
  - ast.ml    
      Defines the datatypes for the abstract syntax trees (ASTs) and values.

  - eval.ml
      The interpreter for the ASTs. 

  - check.ml
      A typechecker for the ASTs. You will edit this and only this
      file for Question 4.

  - poly.ml
      A typechecker for the ASTs that supports let-polymorphism. This is
      not implemented. We may revisit this at some point in the future.

  - helper.ml
      Functions that should be helpful for implementing your solutions.

  - lexer.mll
  - parser.mly
      A lexer and parser for the source language.

  - pprint.ml
      A pretty printer for the ASTs.

  - main.ml
      The top level code that parses in an input file and runs the
      interpreter/typechecker.

  - examples
      Some test programs in the source language. You should really try
      your solution out on all of these examples, and also come up
      with some of your own. There's even a little script (test.sh) to 
      help you try your solution against some test cases. The script will
      say that your test case fails if it doesn't exactly match the
      "gold standard" output. This may be due to different variable
      names and different order of constraints, and your implementation
      may still be correct.

How to compile:
---------------

  If you have make installed, you can simply type "make" at the
  command line. Otherwise, if you are on a Windows machine, you can
  edit the make.bat file to point to your installation of Ocaml, and
  execute the make.bat file. If neither of these methods work, you
  should execute the commands listed in the make.bat file.

  Successful compilation will produce an executable file called "lam".

How to run:
-----------

./lam <file>
  - attempts to type check and then evaluate the program in <file>
